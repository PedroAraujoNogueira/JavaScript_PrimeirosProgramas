1. yarn init -y.
Para iniciar uma aplicação no Node devemos utilizar o comando yarn init -y, ele será responsável por criar o arquivo package.json que estará presente em toda aplicação Node. O arquivo package.json vai armazenar as informações de dependência do nosso projeto e algumas informações adicionais como nome, versão e etc. Para configurar o nome e outras coisas do seu arquivo package.json use o comando "yarn init" sem a flag -y.

2. yarn add express.
O express é um micro-framework e da a disponibilidade de incluirmos rotas em nossa aplicação e ele alem de gerenciar essas rotas tambem gerencia os middlewares. 

3. Para rodar a aplicação devemos colocar no terminal: node src/index.js, o nome do arquivo não precisa ser index.js, poderia ser qualquer outro nome com a extensão .js

4. yarn add nodemon -D. 
Serve para atualizar automaticamente o servidor toda vez que tivermos alteração no código. Então não precisamos mais ficar reiniciando o servidor manualmente, basta darmos um F5 na página no browser.
Há duas formas de rodar o servidor através do nodemon:
1. yarn nodemon src/index.js 
2. Ir no package.json e criar abaixo da license um script. Ex: "scripts": {
    "dev": "nodemon src/index.js"
}
Então agora só precisamos escrever no terminal o nome do script que acabamos de criar. No caso fica
yarn dev.

5. yarn add cors. Toda vez que o front-end vai se comunicar com o back-end ele precisa passar pelas técnicas de segurança do back-end, para evitar que qualquer front-end possa se comunicar com nosso back-end por exemplo. Uma dessas técnicas de segurança é o cors ou Cross-Origin Resource Sharing (Compartilhamento de recursos com origens diferentes). Ou seja, o front-end só conseguirá se comunicar com o back-end se o cors do back-end estiver permitindo acesso para aquele front-end.